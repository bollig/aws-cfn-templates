{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Simple toolset instance.",
  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "InstanceType" : {
      "Description" : "Tool machine EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [
        "t1.micro",
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "g2.2xlarge", "hs1.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "Python34Version" : {
      "Description" : "Python 3.4.x version",
      "Type" : "String",
      "Default" : "3.4.2",
      "MinLength": "5",
      "MaxLength": "5",
      "AllowedPattern" : "3\\.4\\.[0-9]",
      "ConstraintDescription" : "must be semantic versioning."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "t2.micro"    : { "Arch" : "64HVM" },
      "t2.small"    : { "Arch" : "64HVM" },
      "t2.medium"   : { "Arch" : "64HVM" },
      "m3.medium"   : { "Arch" : "64" },
      "m3.large"    : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "c3.large"    : { "Arch" : "64" },
      "c3.xlarge"   : { "Arch" : "64" },
      "c3.2xlarge"  : { "Arch" : "64" },
      "c3.4xlarge"  : { "Arch" : "64" },
      "c3.8xlarge"  : { "Arch" : "64" },
      "r3.large"    : { "Arch" : "64HVM" },
      "r3.xlarge"   : { "Arch" : "64HVM" },
      "r3.2xlarge"  : { "Arch" : "64HVM" },
      "r3.4xlarge"  : { "Arch" : "64HVM" },
      "r3.8xlarge"  : { "Arch" : "64HVM" },
      "g2.2xlarge"  : { "Arch" : "64HVM" },
      "i2.xlarge"   : { "Arch" : "64HVM" },
      "i2.2xlarge"  : { "Arch" : "64HVM" },
      "i2.4xlarge"  : { "Arch" : "64HVM" },
      "i2.8xlarge"  : { "Arch" : "64HVM" },
      "hs1.8xlarge" : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"     : { "64" : "ami-246ed34c", "64HVM" : "ami-b66ed3de" },
      "us-west-1"     : { "64" : "ami-9b6e64de", "64HVM" : "ami-4b6f650e" },
      "us-west-2"     : { "64" : "ami-55a7ea65", "64HVM" : "ami-b5a7ea85" },
      "eu-west-1"     : { "64" : "ami-9c7ad8eb", "64HVM" : "ami-6e7bd919" },
      "eu-central-1"  : { "64" : "ami-a03503b", "64HVM" : "ami-b43503a" },
      "ap-southeast-1": { "64" : "ami-ba5c7ae8", "64HVM" : "ami-ac5c7afe" },
      "ap-southeast-2": { "64" : "ami-71f7954b", "64HVM" : "ami-63f79559" },
      "ap-northeast-1": { "64" : "ami-2385b022", "64HVM" : "ami-4985b048" },
      "sa-east-1"     : { "64" : "ami-9137828c", "64HVM" : "ami-8737829a" }
    }

  },

  "Resources" : {

    "ConsoleMachine": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install GCC, Python, and database clients.",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc48"              : [],
                "gcc48-c++"          : [],
                "bzip2-devel"        : [],
                "openssl-devel"      : [],
                "mysql55"            : [],
                "postgresql93"       : [],
                "git-all"            : [],
                "jq"                 : [],
                "tmux"               : [],
                "zsh"                : [],
                "python27"           : [],
                "python27-devel"     : [],
                "docker"             : []
              }
            },

            "services" : {
              "sysvinit" : {
                "docker" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            },

            "files" : {
              "/home/ec2-user/.aws/config": {
                "content" : { "Fn::Join" : ["", [
                  "[default]\n",
                  "aws_access_key_id = YOUR_ACCESS_KEY\n",
                  "aws_secret_access_key = YOUR_SECRET_KEY\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "ec2-user",
                "group" : "ec2-user"
              },
              "/home/ec2-user/build.sh": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "source /etc/profile.d/nvm.sh\n",
                  "nvm install 0.10\n",
                  "nvm alias default 0.10\n",
                  "nvm use default\n",
                  "virtualenv-2.7 $HOME/.pyvenv/py27\n",
                  "/opt/python/Python-", { "Ref" : "Python34Version" }, "/bin/pyvenv-3.4 --system-site-packages $HOME/.pyvenv/py34\n",
                  "# sudo docker pull ubuntu:14.04\n",
                  "# sudo docker pull centos:centos6\n",
                  "# sudo docker pull centos:centos7\n",
                  "# sudo docker pull busybox:latest\n",
                  "sudo docker pull python:3.4\n",
                  "# sudo docker pull python:3.4-onbuild\n",
                  "sudo docker pull node:0.10\n",
                  "# sudo docker pull node:0.10-onbuild\n",
                  "sudo docker pull postgres:9.3\n",
                  "sudo docker pull mysql:5.5\n",
                  "# sudo docker pull nginx:1.7\n",
                  "# sudo docker pull progrium/logspout:latest\n",
                  "# sudo docker pull skitazaki/python34-ipython:latest\n",
                  "sudo docker images\n",
                  "# rbenv install 2.1.4\n"
                  ]]},
                "mode"  : "000755",
                "owner" : "ec2-user",
                "group" : "ec2-user"
              },
              "/etc/profile.d/nvm.sh": {
                "content" : { "Fn::Join" : ["", [
                  "source /opt/venv/nvm/nvm-master/nvm.sh\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/profile.d/rbenv.sh": {
                "content" : { "Fn::Join" : ["", [
                  "export RBENV_ROOT=/opt/venv/rbenv\n",
                  "export PATH=$RBENV_ROOT/bin:$PATH\n",
                  "eval \"$(rbenv init -)\"\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },

            "sources" : {
              "/usr/local/src/py34" : { "Fn::Join" : ["", [
                "http://python.org/ftp/python/",
                { "Ref" : "Python34Version" },
                "/Python-", { "Ref" : "Python34Version" }, ".tgz"]]},
              "/opt/venv/nvm" : "https://github.com/creationix/nvm/archive/master.zip"
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [
          {"Ref" : "SSHSecurityGroup"}
        ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y\n",
          "yum update -y aws-cfn-bootstrap\n",
          "yum install --enablerepo=epel -y --skip-broken gdal\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ConsoleMachine ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "curl -L https://github.com/zimbatm/direnv/releases/download/v2.5.0/direnv.linux-amd64 > /usr/local/bin/direnv\n",
          "chmod +x /usr/local/bin/direnv\n",

          "curl -L https://github.com/docker/fig/releases/download/1.0.1/fig-`uname -s`-`uname -m` > /usr/local/bin/fig\n",
          "chmod +x /usr/local/bin/fig\n",

          "curl https://bootstrap.pypa.io/get-pip.py > /usr/local/src/get-pip.py\n",
          "python27 /usr/local/src/get-pip.py\n",
          "pip2.7 install virtualenv\n",
          "pip2.7 install ansible\n",

          "PYTHON_VERSION=", { "Ref" : "Python34Version" }, "\n",
          "PYTHON_SRCDIR=/usr/local/src/py34/Python-$PYTHON_VERSION\n",
          "PYTHON_INSTALL=/opt/python/Python-$PYTHON_VERSION\n",

          "cd $PYTHON_SRCDIR\n",
          "./configure --prefix $PYTHON_INSTALL\n",
          "make && make altinstall\n",
          "cd -\n",

          "git clone https://github.com/sstephenson/rbenv.git /opt/venv/rbenv\n",
          "git clone https://github.com/sstephenson/ruby-build.git /opt/venv/rbenv/plugins/ruby-build\n",
          "chown -R ec2-user:ec2-user /opt/venv\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"Tool Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ConsoleMachine",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1200"
      }
    },

    "SSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "SSHCommand" : {
      "Value" : { "Fn::Join" :["", [
        "ssh -i $HOME/.ssh/", { "Ref" : "KeyName" }, ".pem",
        " -l ec2-user ", { "Fn::GetAtt" : [ "ConsoleMachine", "PublicDnsName" ]}
      ]] },
      "Description" : "SSH command to connect ConsoleMachine"
    }
  }

}
